(defgroup pdfsearch nil
  "PDF Search functions."
  :group 'doc-view)

(defcustom pdfsearch-executable
  "pdfsearch"
  "Path to pdfsearch executable."
  :type '(string)
  :group 'pdfsearch)

(defcustom pdfsearch-convert-executable
  "/usr/bin/convert"
  "Path to ImageMagick's convert executable."
  :type '(string)
  :group 'pdfsearch)

(defvar pdfsearch--result-buffer-name "*pdfsearch*")

(defvar-local pdfsearch--lastimage nil
  "Image generated by last search")

(defun pdfsearch--call (page file term resolution)
  (let ((buffer (get-buffer-create pdfsearch--result-buffer-name)))
    (with-current-buffer buffer
      (call-process pdfsearch-executable nil (list buffer t) nil 
                    "-d" (number-to-string resolution)
                    "-f" (number-to-string page)
                    file term)
      (when (> (point) 0)
        (delete-backward-char 1) ;; delete the last \n from output
      (let ((str (buffer-string)))
        (kill-buffer)
        str)))))

(defun pdfsearch--resultline-to-assoc (match)
  (let* ((values (mapcar 'string-to-number (split-string match ","))))
    (list (list 'page (nth 0 values))
          (list 'pt-x (nth 1 values)) (list 'pt-y (nth 2 values))
          (list 'pt-w (nth 3 values)) (list 'pt-h (nth 4 values))
          (list 'px-x (nth 5 values)) (list 'px-y (nth 6 values))
          (list 'px-w (nth 7 values)) (list 'px-h (nth 8 values)))))

(defun pdfsearch ()
  (interactive)
  (let* ((term (read-from-minibuffer "Search forward: "))
         (result (pdfsearch--call (doc-view-current-page) doc-view--buffer-file-name term doc-view-resolution))
         (matches (mapcar 'pdfsearch--resultline-to-assoc 
                          (split-string result "\n")))
         )
    (if (>= (length matches) 0) ;; have matches 
      (let* ((result-page (cadr (assoc 'page (car matches))))
             (infile-pdf (nth (- result-page 1) doc-view--current-files)))
        (when (and pdfsearch--lastimage (file-exists-p pdfsearch--lastimage))
          (delete-file pdfsearch--lastimage))
        (setq pdfsearch--lastimage (expand-file-name (format "pdfsearch-%d.png" (random 1000000)) doc-view-cache-directory))
        (copy-file infile-pdf pdfsearch--lastimage t)
        (dolist (match matches)
          (pdfsearch-draw-box-tempfile pdfsearch--lastimage
                                       (cadr (assoc 'px-x match)) (cadr (assoc 'px-y match))
                                       (cadr (assoc 'px-w match)) (cadr (assoc 'px-h match))))
        (message "%d matches" (length matches))
        (doc-view-goto-page result-page)
        (doc-view-insert-image pdfsearch--lastimage :pointer 'arrow))
      (progn ;; no matches
        (message "no match")))))


(defun pdfsearch-draw-box-tempfile (file x1 y1 w h)
  (message "%s x=%s y=%s w=%s h=%s"  file x1 y1 (+ x1 w) (+ y1 h))
  (call-process pdfsearch-convert-executable nil nil nil file
                  "-stroke" "red" 
                  "-fill" "none"
                  "-draw" (format "rectangle %d,%d %d,%d"
                                  x1 y1 (+ x1 w) (+ y1 h))
                  file))

(provide 'pdfsearch)
